/////////////////////////////////////////////////////////////////////////////
//
//  ICLOUD3 EVENT LOG CARD
//
//  This custom card displays Event Log records generated by the iCloud3
//  Custom Component.  The event log records and control fields are stored
//  in the sensor.icloud3_event_log entity.
//
//  When iCloud3 starts, the version of this file, 'icloud3-event-log-card.js',
//  in the 'custom_components\icloud3' directory  (or the current directory of
//  the icloud3 platform being run) is compared with the one in 'www/custom_cards'.
//  If they do not match, the one in the 'custom_components\icloud3' is copied
//  to the 'www\custom_cards' directory.
//
//  Version=2.3.0 (1/2/2021)
//
/////////////////////////////////////////////////////////////////////////////

//---------------------------------------------------------------------------

class iCloud3EventLogCard extends HTMLElement {
    constructor() {
        super()
        this.attachShadow({ mode: 'open' })
    }
    //---------------------------------------------------------------------------
    setConfig(config) {
        const version   = "2.3.0"
        const cardTitle = "iCloud3 Event Log"

        const root = this.shadowRoot
        const hass = this._hass

        // Create card elements
        const card = document.createElement('ha-card')
        const background = document.createElement('div')
        background.id = "background"

        // Title Bar
        const titleBar = document.createElement("div")
        titleBar.id = "titleBar"
        const title = document.createElement("div")
        title.id = "title"
        title.textContent = cardTitle

        //Utility base contains hidden variables
        const utilityBar = document.createElement("div")
        utilityBar.id = "utilityBar"
        const thisButtonId = document.createElement("div")
        thisButtonId.id = "thisButtonId"
        thisButtonId.classList.add("themeTextColor")
        thisButtonId.innerText = "setup"
        const logRecdCnt = document.createElement("div")
        logRecdCnt.id = "logRecdCnt"
        logRecdCnt.innerText = "-1"
        const devType = document.createElement("div")
        devType.id = "devType"
        devType.innerText = ""
        const hdrCellWidth = document.createElement("div")
        hdrCellWidth.id = "hdrCellWidth"
        hdrCellWidth.innerText = "0,66.7px,97.8px,94.4px,80px,70px,66.7px"

        const infoText = document.createElement("div")
        infoText.id = "infoText"
        infoText.innerText = ''

        // Button Bar
        const buttonBar = document.createElement("div")
        buttonBar.id = "buttonBar"
        buttonBar.class = "buttonBar"

        // Name Buttons
        const btnName0     = document.createElement('btnName')
        btnName0.id        = "btnName0"
        btnName0.classList.add("btnBaseFormat")
        btnName0.style.setProperty('visibility', 'visible')
        btnName0.innerText = "Setup"
        const btnName1     = document.createElement('btnName')
        btnName1.id        = "btnName1"
        btnName1.classList.add("btnBaseFormat")
        btnName1.classList.add("btnHidden")
        const btnName2     = document.createElement('btnName')
        btnName2.id        = "btnName2"
        btnName2.classList.add("btnBaseFormat")
        btnName2.classList.add("btnHidden")
        const btnName3     = document.createElement('btnName')
        btnName3.id        = "btnName3"
        btnName3.classList.add("btnBaseFormat")
        btnName3.classList.add("btnHidden")
        const btnName4     = document.createElement('btnName')
        btnName4.id        = "btnName4"
        btnName4.classList.add("btnBaseFormat")
        btnName4.classList.add("btnHidden")
        const btnName5     = document.createElement('btnName')
        btnName5.id        = "btnName5"
        btnName5.classList.add("btnBaseFormat")
        btnName5.classList.add("btnHidden")
        const btnName6     = document.createElement('btnName')
        btnName6.id        = "btnName6"
        btnName6.classList.add("btnBaseFormat")
        btnName6.classList.add("btnHidden")
        const btnName7     = document.createElement('btnName')
        btnName7.id        = "btnName7"
        btnName7.classList.add("btnBaseFormat")
        btnName7.classList.add("btnHidden")
        const btnName8     = document.createElement('btnName')
        btnName8.id        = "btnName8"
        btnName8.classList.add("btnBaseFormat")
        btnName8.classList.add("btnHidden")
        const btnName9     = document.createElement('btnName')
        btnName9.id        = "btnName9"
        btnName9.classList.add("btnBaseFormat")
        btnName9.classList.add("btnHidden")

        /* Action Select Box */
        const btnAction = document.createElement('select')
        btnAction.id    = "btnAction"
        btnAction.style.setProperty('visibility', 'visible')
        btnAction.setDefault
        btnAction.classList.add("btnBaseFormat")
        btnAction.classList.add("btnAction")

        var btnActionOptA    = document.createElement("option")
        var btnActionOptATxt = document.createTextNode("Actions\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0v"+version)
        btnActionOptA.setAttribute("value", "action")
        btnActionOptA.setAttribute("id", "optAction")
        btnActionOptA.classList.add("btnActionOptionTransparent")
        btnActionOptA.appendChild(btnActionOptATxt)
        btnAction.appendChild(btnActionOptA)

        var btnActionOptG = document.createElement("optGroup")
        btnActionOptG.setAttribute("label", "————— Global Actions ————")
        btnActionOptG.classList.add("btnActionOptionGroup")
        btnAction.appendChild(btnActionOptG)

        var btnActionOptG1    = document.createElement("option")
        var btnActionOptG1Txt = document.createTextNode("Restart iCloud3")
        btnActionOptG1.setAttribute("value", "restart")
        btnActionOptG1.classList.add("btnActionOption")
        btnActionOptG1.appendChild(btnActionOptG1Txt)
        btnAction.appendChild(btnActionOptG1)

        var btnActionOptG2    = document.createElement("option")
        var btnActionOptG2Txt = document.createTextNode("Pause Polling")
        btnActionOptG2.setAttribute("value", "pause")
        btnActionOptG2.classList.add("btnActionOption")
        btnActionOptG2.appendChild(btnActionOptG2Txt)
        btnAction.appendChild(btnActionOptG2)

        var btnActionOptG3    = document.createElement("option")
        var btnActionOptG3Txt = document.createTextNode("Resume Polling")
        btnActionOptG3.setAttribute("value", "resume")
        btnActionOptG3.classList.add("btnActionOption")
        btnActionOptG3.appendChild(btnActionOptG3Txt)
        btnAction.appendChild(btnActionOptG3)

        var btnActionOptG7    = document.createElement("option")
        var btnActionOptG7Txt = document.createTextNode("Update All Locations")
        btnActionOptG7.setAttribute("value", "location")
        btnActionOptG7.classList.add("btnActionOption")
        btnActionOptG7.appendChild(btnActionOptG7Txt)
        btnAction.appendChild(btnActionOptG7)




        //---------------------------------------------------------
        var btnActionOptD = document.createElement("optGroup")
        btnActionOptD.setAttribute("label", "————— Selected Phone ————")
        btnActionOptD.classList.add("btnActionOptionGroup")
        btnAction.appendChild(btnActionOptD)

        var btnActionOptD1    = document.createElement("option")
        var btnActionOptD1Txt = document.createTextNode("Pause Polling")
        btnActionOptD1.setAttribute("value", "dev-pause")
        btnActionOptD1.classList.add("btnActionOption")
        btnActionOptD1.appendChild(btnActionOptD1Txt)
        btnAction.appendChild(btnActionOptD1)

        var btnActionOptD2    = document.createElement("option")
        var btnActionOptD2Txt = document.createTextNode("Resume Polling")
        btnActionOptD2.setAttribute("value", "dev-resume")
        btnActionOptD2.classList.add("btnActionOption")
        btnActionOptD2.appendChild(btnActionOptD2Txt)
        btnAction.appendChild(btnActionOptD2)

        var btnActionOptD3    = document.createElement("option")
        var btnActionOptD3Txt = document.createTextNode("Update Phone's Location")
        btnActionOptD3.setAttribute("value", "dev-location")
        btnActionOptD3.classList.add("btnActionOption")
        btnActionOptD3.appendChild(btnActionOptD3Txt)
        btnAction.appendChild(btnActionOptD3)

        var btnActionOptD4    = document.createElement("option")
        var btnActionOptD4Txt = document.createTextNode("Send Find My iPhone Alert")
        btnActionOptD4.setAttribute("value", "dev-find-iphone-alert")
        btnActionOptD4.classList.add("btnActionOption")
        btnActionOptD4.appendChild(btnActionOptD4Txt)
        btnAction.appendChild(btnActionOptD4)

        var btnActionOptOC = document.createElement("optGroup")
        btnActionOptOC.setAttribute("label", "———— Other Commands ————")
        btnActionOptOC.classList.add("btnActionOptionGroup")
        btnAction.appendChild(btnActionOptOC)

        var btnActionOptOC1    = document.createElement("option")
        var btnActionOptOC1Txt = document.createTextNode("Export Event Log")
        btnActionOptOC1.setAttribute("value", "dev-export_event_log")
        btnActionOptOC1.classList.add("btnActionOption")
        btnActionOptOC1.appendChild(btnActionOptOC1Txt)
        btnAction.appendChild(btnActionOptOC1)

        var btnActionOptOC2    = document.createElement("option")
        var btnActionOptOC2Txt = document.createTextNode("Show Tracking Monitors")
        btnActionOptOC2.setAttribute("value", "dev-log_level: eventlog")
        btnActionOptOC2.setAttribute("id", "optEvlog")
        btnActionOptOC2.classList.add("btnActionOption")
        btnActionOptOC2.appendChild(btnActionOptOC2Txt)
        btnAction.appendChild(btnActionOptOC2)

        var btnActionOptOC3    = document.createElement("option")
        var btnActionOptOC3Txt = document.createTextNode("Show Startup Log, Errors & Alerts")
        btnActionOptOC3.setAttribute("value", "dev-refresh_event_log")
        btnActionOptOC3.setAttribute("id", "optStartuplog")
        btnActionOptOC3.classList.add("btnActionOption")
        btnActionOptOC3.appendChild(btnActionOptOC3Txt)
        btnAction.appendChild(btnActionOptOC3)

        var btnActionOptOC4    = document.createElement("option")
        var btnActionOptOC4Txt = document.createTextNode("Start HA Debug Logging")
        btnActionOptOC4.setAttribute("value", "dev-log_level: debug")
        btnActionOptOC4.setAttribute("id", "optHalog")
        btnActionOptOC4.classList.add("btnActionOption")
        btnActionOptOC4.appendChild(btnActionOptOC4Txt)
        btnAction.appendChild(btnActionOptOC4)

        var btnActionOptOC5    = document.createElement("option")
        var btnActionOptOC5Txt = document.createTextNode("Reset iCloud Interface")
        btnActionOptOC5.setAttribute("value", "reset_session")
        btnActionOptOC5.setAttribute("id", "optHalog")
        btnActionOptOC5.classList.add("btnActionOption")
        btnActionOptOC5.appendChild(btnActionOptOC5Txt)
        btnAction.appendChild(btnActionOptOC5)
        //-------------------------------------------------------------

        const btnHelp = document.createElement('A')
        btnHelp.id    = "btnHelp"
        btnHelp.classList.add("btnHelp")
        btnHelp.style.setProperty('visibility', 'visible')
        btnHelp.setAttribute('href', 'https://gcobb321.github.io/icloud3/#/')
        btnHelp.setAttribute('target', '_blank')
        btnHelp.innerHTML=`<svg width="24px" height="24px" viewBox="0 0 24 24" fill="none" stroke="#000000" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="feather feather-help-circle"><circle cx="12" cy="12" r="10"></circle><path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3" style="stroke-width:2"></path><line x1="12" y1="17" x2="12.01" y2="17" style="stroke-width:3"></line></svg>`

        const btnRefresh = document.createElement('btnName')
        btnRefresh.id    = "btnRefresh"
        btnRefresh.classList.add("btnRefresh")
        btnRefresh.style.setProperty('visibility', 'visible')
        btnRefresh.innerHTML=`<svg width="24px" height="24px" viewBox="0 0 24 24" fill="none" stroke="#000000" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" class="feather feather-rotate-cw"><polyline points="23 4 23 10 17 10"></polyline><path d="M20.49 15a9 9 0 1 1-2.12-9.36L23 10"></path></svg>`

        // Message Bar
        const statusBar = document.createElement("div")
        statusBar.id = "statusBar"

        const statusName = document.createElement("div")
        statusName.id = "statusName"
        statusName.innerText = "Select Person"
        statusName.style.color = "firebrick"

        const statusTime = document.createElement("div")
        statusTime.id = "statusTime"
        statusTime.innerText = "setup"
        statusTime.style.color = "firebrick"

        const statusMsgPopup  = document.createElement("div")
        statusMsgPopup.id = "statusMsgPopup"
        statusMsgPopup.classList.add("statusMsgPopup")
        statusMsgPopup.classList.add("statusMsgPopupHidden")
        statusMsgPopup.style.setProperty('zIndex', '9999')

        //Event Table
        const tblEvlogContainer = document.createElement("div")
        tblEvlogContainer.id = "tblEvlogContainer"

        const tblEvlog = document.createElement("TABLE")
        tblEvlog.id = "tblEvlog"
        tblEvlog.classList.add("tblEvlog")

        const tblEvlogHdr = document.createElement("TH")
        tblEvlogHdr.id = "tblEvlogHdr"
        tblEvlogHdr.classList.add("tblEvlogHeader")

        const tblEvlogBody = document.createElement("BODY")
        tblEvlogBody.id = "tblEvlogBody"
        tblEvlogBody.classList.add("tblEvlogBody")

         // Style
        const cssStyle = document.createElement('style')
        cssStyle.textContent = `
            /* Text special colors */
            .blue               {color: blue;}
            .teal               {color: teal;}
            .darkgray           {color: darkgray;}
            .dimgray            {color: dimgray;}
            .black              {color: var(--primary-text-color);}
            .silver             {color: silver;}
            .darkred            {color: darkred;}
            .green              {color: green;}
            .red                {color: var(--label-badge-red);}
            .redChg             {color: var(--label-badge-red);}
            .redbox             {border: 1px solid var(--label-badge-red); border-collapse: collapse;}

            .iosappRecd         {color: teal;}
            .errorMsg           {color: var(--label-badge-red); border-left: 2px solid var(--label-badge-red);}
            .warningMsg         {color: darkorange; border-left: 2px solid darkorange;}

            /* Color for special records */
            /* DarkGoldenRod, Fushia, DeepPink, OrangeRed, #e600e6 (firebrickish), MediumVioletRed */
            .specColor1         {color: LightSeaGreen;  border-left: 2px solid firebrick;}
            .specColor2         {color: BlueViolet; border-left: 2px solid BlueViolet;}
            .specColor3         {color: OrangeRed;  border-left: 2px solid OrangeRed;}
            .specColor4         {color: DeepPink;   border-left: 2px solid SeaGreen;}
            .specColor5         {color: MediumVioletRed;       border-left: 2px solid RoyalBlue;}
            .specColor6         {color: Var(--dark-primary-color); border-left: 2px solid var(--dark-primary-color);}


            .trigger            {color: var(--primary-text-color); font-weight: 300;}
            .normalText         {color: var(--primary-text-color);}
            .event              {colspan: 5;}

            /* Solid bars for update start/complete, startup stage recds, startup date recd */
            .hdrTopBottomShadow {-moz-box-shadow: inset rgba(0, 0, 0, 0.8) 0px 14px 18px -18px, inset #000000 0px -14px 18px -18px;
                                -webkit-box-shadow: inset rgba(0, 0, 0, 0.8) 0px 14px 18px -18px, inset #000000 0px -14px 18px -18px;
                                box-shadow:  inset rgba(0, 0, 0, 0.8) 0px 14px 18px -18px, inset #000000 0px -14px 18px -18px;
                                }
            .updateRecdHdr      {color: white;
                                background-color: rgba(var(--rgb-primary-color), 0.85);
                                border-top: 1px solid var(--light-primary-color);
                                border-bottom: 1px solid var(--light-primary-color);
                                font-weight: 450;
                                }
            .updateEdgeBar      {border-left: 4px solid var(--dark-primary-color);}
            .stageRecdHdr       {color: white;
                                background-color: peru; font-weight: 450;
                                border-top: 1px solid peru;
                                border-bottom: 1px solid peru;
                                }
            .stageEdgeBar       {border-left: 4px solid peru;}
            .dateBarHdr         {color: white;
                                background-color: peru;
                                border-top: 1px solid peru;
                                border-bottom: 1px solid peru;
                                }
            .noLeftEdge         {border-left: none;}

            /* Card Definition */
            ha-card {
                background-color: var(--card-background-color);
                padding: 10px;
            }
            #background {
                position: relative;
                height: 675px;
                /*width: 473px;*/
            }

            /* Title Bar set up */
            #titleBar {
                position: relative;
                display: inline-block;
                height: 20px;
                margin: 4px 0px -6px 0px;
                width: 100%;
                //border: 1px solid dodgerblue;
            }
            #title {
                height: 100%;
                width: 60%;
                text-align: left;
                font-size: 24px;
                margin: 0px 0px 0px 0px;
                float: left;
                vertical-align: middle;
                color: var(--primary-text-color);
                //border: 1px solid var(--label-badge-red);
            }

            #utilityBar {
                position: relative;
                display: inline-block;
                margin: 2px 0px -10px 0px;
                width: 100%;
                /*border: 1px solid dodgerblue;*/
            }
            #thisButtonId, #logRecdCnt, #devType, #hdrCellWidth {
                /*font-size: 2px;*/
                color: transparent;
                width: 5px;
                float: left;
                /*border: 1px solid green;*/
            }
            #infoText {
                color: var(--primary-color);
                float: right;
            }

            /* Store the theme's primary text color in the thisButtonId field */
            .themeTextColor {
                color: var(--primary-text-color);}
                background-color: var(--secondary-text-color);}
            }

            /* Message Bar setup */
            #statusBar {
                position: relative;
                width: 100%;
                /*border: 1px solid dodgerblue;*/
            }
            #statusName {
                width: 40%;
                color: firebrick;
                float: left;
                font-size: 14px;
                font-weight: 400;
                margin: 2px 0px 4px 0px;
                /*border: 1px solid var(--label-badge-red);*/
            }
            #statusTime {
                margin: 2px 2px 4px 0px;
                color: firebrick;
                float: right;
                font-size: 14px;
                font-weight: 400;
                /*border: 1px solid green;*/
            }
            .statusMsgPopup {
                position: relative;
                width: 85%;
                margin-left: auto;
                margin-right: auto;
                color: white;
                background-color: var(--label-badge-red);
                padding: 12px 12px;
                font-size: 14px;
                font-weight: 400;
                z-index: 9999;
                -webkit-box-shadow: 5px 5px 23px 3px rgba(0,0,0,0.75);
                -moz-box-shadow: 5px 5px 23px 3px rgba(0,0,0,0.75);
                box-shadow: 3px 3px 20px 3px rgba(0,0,0,0.75);
            }
            .statusMsgPopupHidden {
                height: 0px;
                width: 0px;
                visibility: hidden;
                border: 0px;
            }

            /* Scrollbar */
            ::-webkit-scrollbar {width: 7px;}
            ::-webkit-scrollbar-track {background-color: transparent;
                border-left: 1px solid rgba(var(--rgb-primary-color), 0.2);}
            ::-webkit-scrollbar-thumb {background: rgba(var(--rgb-accent-color), 0.7);
                border-radius: 4px;}
            ::-webkit-scrollbar-thumb:hover {background: var(--accent-color);}

            /* Event Log Table */
            .txtTblStyle        {color: var(--dark-primary-color);}
            .txtTblHdr          {border-left: 1px solid var(--dark-primary-color);}
            .txtTblHdrRow       {color: var(--dark-primary-color);}
            .txtTblEdge         {border-left: 1px solid var(--dark-primary-color);}

            .highlightResults   {color: red;}
            .inprocessResults   {color: firebrick;}
            .highlightItem      {color: silver;}
            .highlightItemChg   {color: silver;}

            #tblEvlog {
                position: relative;
                margin: 0px 0px;
                width: 100%;
            }

            /* Event Log Table */
            .tblEvlog {
                position: sticky;
                display: block;
                table-layout: fixed;
                width: 100%;
                border-collapse: collapse;
            }
            .tblEvlogHdr {
                position: sticky;
                table-layout: fixed;
                display: block;
                width: 100%;
                height: 16px;
                padding: 0px 0px 3px 0px;
                border-collapse: collapse;
                background-color: rgba(var(--rgb-primary-color), 0.15);
                border: 1px solid rgba(var(--rgb-primary-color), 0.3);
            }
            .tblEvlogHdr tr {
                display: block;
            }
            .tblEvlogBody {
                display: block;
                table-layout: fixed;
                width: 100%;
                height: 555px;
                border-collapse: collapse;
                border: 1px solid rgba(var(--rgb-primary-color), 0.2);
                border-top: 1px solid transparent;
                overflow-y: scroll;
                overflow-x: hidden;
                -webkit-overflow-scrolling: touch;
            }
            .tblEvlogBody tr {
                border: 1px solid rgba(var(--rgb-primary-text-color), 0.1);
                line-height: 1.4em;
                z-index: 1;
            }

            .noTopBorder {border: 1px solid transparent;}
            .rowBorder {border-left: 2px solid cyan;}
            .tblEvlogBody tr:nth-child(even) {background-color: rgba(var(--rgb-primary-text-color), 0.05);}
            .tblEvlogBody tr:nth-child(odd) {background-color: var(--primary-background-color);}

            /* Browser Text */
            .colTime        {width: 66.67px; vertical-align: text-top;}
            .colStat        {width: 92.22px; vertical-align: text-top;}
            .colZone        {width: 90.00px; vertical-align: text-top;}
            .colIntv        {width: 76.67px; vertical-align: text-top;}
            .colTrav        {width: 65.56px; vertical-align: text-top;}
            .colDist        {width: 62.22px; vertical-align: text-top;}
            .colTimeTextRow {color: rgba(var(--rgb-primary-text-color), 0.5); vertical-align: text-top;}
            .colText        {color: var(--primary-text-color)}

            /* Browser Header */
            .hTime        {width: 64.6px; text-align: left; color: var(--primary-text-color); padding-left: 4px;}
            .hStat        {width: 90.2px; text-align: left; color: var(--primary-text-color);}
            .hZone        {width: 88.0px; text-align: left; color: var(--primary-text-color);}
            .hIntv        {width: 73.6px; text-align: left; color: var(--primary-text-color);}
            .hTrav        {width: 63.6px; text-align: left; color: var(--primary-text-color);}
            .hDist        {width: 59.1px; text-align: left; color: var(--primary-text-color);}
            .hdrBase      {text-align: left; color: var(--primary-text-color);}

            /* Buttons */
            .buttonBar {
                position: relative;
                margin: 8px 0px 8px 0px;
                width: 100%;
                border: 1px solid blue;
            }
            .btnBaseFormat {
                display: inline-block;
                visibility: visible;
                font-family: Roboto,sans-serif;
                font-size: 14px;
                font-weight: bolder;
                color: var(--primary-text-color);
                /*background-color: transparent;*/
                background-color: rgba(var(--rgb-primary-text-color), 0.05);
                text-decoration: none;
                text-align: center;
                height: 24px;
                padding: 1px 4px;
                margin: 4px 6px 0px 0px;
                border: 1px solid #ff4d4d;
                border-radius: 3px;
                box-sizing: border-box;
                /*border: 1px solid #0080F0;*/
            }
            .btnSelected {
                color: white;
                background-color: darkred;
            }
            .btnNotSelected {
                color: var(--primary-text-color);
                background-color: rgba(var(--rgb-primary-text-color), 0.04);
            }
            .btnHidden {
                height: 0px;
                width: 0px;
                margin: 0px;
                padding: 0px;
                visibility: hidden;
                border: 0px;
            }
            .btnHover {border: 1px solid var(--primary-color);}

            /* Helph Select Button */
            #btnHelp {
                display: inline-block;
                visibility: visible;
                color: var(--primary-text-color);
                background-color: transparent;
                /*height: 30px;*/
                /*width: 30px;*/
                margin: 0px 0px 0px 6px;
                float: right;
            }
            .btnHelp {
                border: 0px solid transparent;
                background-color: transparent;
                box-shadow: transparent;
            }

            /* Refresh Select Button */
            #btnRefresh {
                display: inline-block;
                visibility: visible;
                color: var(--primary-text-color);
                background-color: transparent;
                /*height: 28px;*/
                /*width: 30px;*/
                margin: 0px 0px 0px 4px;
                float: right;
            }

            .btnRefresh {
                border: 0px solid transparent;
                background-color: transparent;
                box-shadow: transparent;
            }
            svg         {stroke: #ff4d4d;}
            svg:hover   {stroke: var(--primary-color);}

            /* Action Select Button */
            #btnAction {
                color: white;
                background-color: darkred;
                float: right;
                margin: 4px 2px 0 0;
                border: 1px solid #ff4d4d;
            }
            #btnAction:hover {border: 1px solid var(--primary-color);}
            .btnAction {
                background: darkred;
                font-weight: bolder;
                height: 24px;
                width: 80px;
                border-radius: 3px;
                overflow: hidden;
                -webkit-appearance: none;
                -moz-appearance: none;
                transition: color 0.3s ease, background-color 0.3s ease, border-bottom-color 0.3s ease;

                /* Action Button Down Arrow */
                background-image:
                    linear-gradient(#cc0000, #cc0000),
                    linear-gradient(darkred 43%, transparent 35%),
                    linear-gradient(-135deg, transparent 58%, darkred 50%),
                    linear-gradient(-225deg, white 58%, darkred 50%);
                background-size: 1px 100%, 22px 26px, 22px 26px, 22px 100%;
                background-repeat: no-repeat;
                background-position: right 20px center, right bottom, right bottom, right bottom;

            }
            .btnAction::-ms-expand {
                display: none;
            }
            .btnActionOptionGroup {
                background-color: var(--primary-background-color);
                color: var(--primary-text-color);
            }
            .btnActionOptionTransparent {
                background-color: var(--primary-background-color);
                color: var(--primary-text-color);
            }
            .btnActionOption {
                background-color: var(--primary-background-color);
                color: var(--primary-text-color);
            }

            /*  IPHONE IPAD Mods */
            /* iPhone with smaller screen*/
            @media only screen and (max-device-width: 640px),
                    only screen and (max-device-width: 667px),
                    only screen and (max-width: 480px) {

                ha-card         {padding: 4px 4px 4px 4px;}
                .btnBaseFormat  {margin: 0px 2px 4px 0px; padding: 1px 3px;)
                .btnAction      {width: 45px; height: 22px;}
                .updateRecd     {font-weight: 450;}

                .ic3StartupMsg  {font-weight: 450;}
                .tblEvlogBody tr:nth-child(even) {background-color: #EEF2F5;}
                ::-webkit-scrollbar {width: 1px;}
                ::-webkit-scrollbar-thumb {background: rgba(var(--rgb-accent-color), 0.7);}
            }

            /* iPad ???
            @media only screen
                and (min-device-width : 768px)
                and (max-device-width : 1024px) {
                    .updateRecd  {font-weight: 450;}
                    .updateEdgeBar {border-left-width: 3px;}
                    .ic3StartupMsg {font-weight: 450;}
                    .tblEvlogBody tr:nth-child(even) {background-color: #EEF2F5;}
                    ::-webkit-scrollbar {width: 1px;}
                    ::-webkit-scrollbar-thumb {background: rgba(var(--rgb-accent-color), 0.7);}
                }
                */

        `

        // Build title
        titleBar.appendChild(title)
        titleBar.appendChild(btnHelp)
        titleBar.appendChild(btnRefresh)

        utilityBar.appendChild(thisButtonId)
        utilityBar.appendChild(logRecdCnt)
        utilityBar.appendChild(devType)
        utilityBar.appendChild(hdrCellWidth)
        utilityBar.appendChild(infoText)

        // Create Buttons
        buttonBar.appendChild(btnName0)
        buttonBar.appendChild(btnName1)
        buttonBar.appendChild(btnName2)
        buttonBar.appendChild(btnName3)
        buttonBar.appendChild(btnName4)
        buttonBar.appendChild(btnName5)
        buttonBar.appendChild(btnAction)
        buttonBar.appendChild(btnName6)
        buttonBar.appendChild(btnName7)
        buttonBar.appendChild(btnName8)
        buttonBar.appendChild(btnName9)

        // Build Message Bar
        statusBar.appendChild(statusName)
        statusBar.appendChild(statusTime)
        statusBar.appendChild(statusMsgPopup)

        tblEvlog.appendChild(tblEvlogHdr)
        tblEvlog.appendChild(tblEvlogBody)
        tblEvlogContainer.appendChild(tblEvlog)

        // Create Background
        background.appendChild(titleBar)
        background.appendChild(utilityBar)
        background.appendChild(buttonBar)
        background.appendChild(statusBar)
        background.appendChild(tblEvlogContainer)
        background.appendChild(cssStyle)

        card.appendChild(background)
        root.appendChild(card)

        // Click & Mouse Events
        for (let i = 0; i <= 9; i++) {
            let buttonId = 'btnName' + i
            let button   = root.getElementById(buttonId)

            button.addEventListener("mousedown", event => { this._nameButtonPress(buttonId); })
            button.addEventListener("mouseover", event => { this._btnClassMouseOver(buttonId); })
            button.addEventListener("mouseout",  event => { this._btnClassMouseOut(buttonId); })
        }

        btnAction.addEventListener("change", event => { this._commandButtonPress("btnAction"); })
        btnHelp.addEventListener("mouseover", event => { this._btnClassMouseOver("btnHelp"); })
        btnHelp.addEventListener("mouseout",  event => { this._btnClassMouseOut("btnHelp"); })

        btnRefresh.addEventListener("mousedown", event => { this._commandButtonPress("btnRefresh"); })
        btnRefresh.addEventListener("mouseover", event => { this._btnClassMouseOver("btnRefresh"); })
        btnRefresh.addEventListener("mouseout",  event => { this._btnClassMouseOut("btnRefresh"); })

        // Add to root
        this._config = config
    }

    // Create card.
    //---------------------------------------------------------------------------
    set hass(hass) {
        /* Hass will do this on a regular basis. If this is the first time
        through, set up the button names. otherwise, display the event table.
        */
        const root           = this.shadowRoot
        this._hass           = hass
        const thisButtonId   = root.getElementById("thisButtonId")
        const statusTime     = root.getElementById("statusTime")
        const statusMsgPopup = root.getElementById("statusMsgPopup")
        const tblEvlog       = root.getElementById("tblEvlog")

        try {
            const updateTimeAttr = hass.states['sensor.icloud3_event_log'].attributes['update_time']
            if (thisButtonId.innerText == "setup") {
                this._setupDevType()
                this._setupButtonNames()
                this._nameButtonPress(this._currentButtonId())
            }

            //this._displayNameMsgL('/'+statusTime.innerText + '/'+updateTimeAttr+'/')
            if (statusTime.innerText.indexOf(updateTimeAttr) == -1) {
                this._setupEventLogTable('hass')
            }
            statusMsgPopup.classList.add('statusMsgPopupHidden')
        }
        catch(err) {
            const statusMsgPopup = root.getElementById("statusMsgPopup")
            const statusTime  = root.getElementById("statusTime")

            if (statusMsgPopup.classList.contains('statusMsgPopupHidden') == false) {
                return
            }
            tblEvlog.style.setProperty('visibility', 'hidden')
            const msgRestarting = '<p>iCloud3 is restarting</p>'
            const msgNotRunning = '<p>iCloud3 Status:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• restarting,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• not running,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• not installed,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• has not been set up or,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;• there are other errors.<hr>Be sure you have setup the iCloud3 device_tracker platform in the HA configuration.yaml file.<br><br>Check for iCloud3 load errors in the HA Logs here:<br>HA Sidebar>Configuration>Logs.<br><br>Select the Question Mark (?) in the upper right to review the iCloud3 documentation.</p>'

            if (err.name == 'TypeError') {
                if (err.message.indexOf('attributes') > -1) {
                    if (thisButtonId.innerText == "setup") {
                        statusMsgPopup.innerHTML = msgNotRunning
                    } else {
                        statusMsgPopup.innerHTML = msgRestarting
                    }
                    statusMsgPopup.classList.remove('statusMsgPopupHidden')
                } else if (err.message.indexOf('undefined') == -1) {
                    alert(err)
                }
            } else {
                alert(err)
            }
        }
    }

    //---------------------------------------------------------------------------
    _setupButtonNames() {
        /* Cycle through the sensor.icloud3_event_log attributes and
        build the names on the buttons, and make them visible.
        */
        const root          = this.shadowRoot
        const hass          = this._hass
        const thisButtonId  = root.getElementById("thisButtonId")
        const tblEvlog      = root.getElementById("tblEvlog")
        const filtername    = hass.states['sensor.icloud3_event_log'].attributes['filtername']
        const namesAttr     = hass.states['sensor.icloud3_event_log'].attributes['names']
        const names         = Object.values(namesAttr)
        var nameCnt         = names.length

        thisButtonId.innerText = 'btnName0'

        tblEvlog.style.setProperty('visibility', 'visible')

        if (nameCnt > 10) {nameCnt = 10}
        for (var i = 0; i < nameCnt; i++) {
            let buttonId = 'btnName' + i
            var button = root.getElementById(buttonId)

            //Get button for data in current sensor.icloud3_event_log
            if (filtername == names[i]) {
                thisButtonId.innerText = buttonId
            }

            if (i < names.length) {
                button.innerText = names[i]
                button.style.setProperty('visibility', 'visible')
                button.classList.remove('btnHidden')
                button.classList.add('btnNotSelected')

            //} else {
            //    button.innerText = "Device-"+i
            //    button.style.setProperty('visibility', 'visible')
            //    button.classList.remove('btnHidden')
            }
        }
    }

//---------------------------------------------------------------------------
    _setupEventLogTable(devicenameParm) {
        /* Cycle through the sensor.icloud3_event_log attributes and
        build the event log table
        */

        const root           = this.shadowRoot
        const hass           = this._hass
        const tblEvlog       = root.getElementById("tblEvlog")
        const hdrCellWidth   = root.getElementById("hdrCellWidth")
        const logRecdCnt     = root.getElementById("logRecdCnt")
        const devType        = root.getElementById("devType")

        var logAttr = hass.states['sensor.icloud3_event_log'].attributes['logs']

        /*
        The Evlog table has been built and displayed but Hass usually calls this routine a
        second time. No need to builds tblEvlog again but now go back thru and
        update the header cell lengths
        */

        if (logAttr.length == logRecdCnt.innerText) {
            if (hdrCellWidth.innerText.startsWith('0,')) {
                this._resize_header_width()
            }
            //this._displayNameMsgL('Return len=/'+logAttr.length+'/'+logRecdCnt.innerText)
            return
        }

        this._checkNameButtonSelected()

        if (logAttr.length > 0) {
            var logEntriesRaw = logAttr.slice(2,-2)
            var logEntries    = logEntriesRaw.split('], [',99999)
        }

        logRecdCnt.innerText = logAttr.length
        let row = 0
        var sameTextCnt = 0
        var infoTimeText = ""

        var iPhoneP = false
        var iPhoneL = false
        var iPad    = false
        var iPadP   = false
        var iPadL   = false
        if (devType.innerText == "phnP") {iPhoneP = true}
        else if (devType.innerText == "phnL") {iPhoneL = true}
        else if (devType.innerText == "padP") {iPadP = true}
        else if (devType.innerText == "padL") {iPadL = true}
        if (devType.innerText.startsWith("pad") > 0) {iPad = true}

        /* Field naming conventions (xTime examples appply to all cell fields):
            thTime = Header text for Time column
            hTime  = hTime header Id & Class name
            iTime  = iTime data cell Id name
            classTime = iTime class name
            tTime  = Time text for current record
            nTime  = Time text for next record
        */

        var cellWidth = hdrCellWidth.innerText.split(',')
        var thTime = "Time"
        var thStat = "iOS App"
        var thZone = "iC3 Zone"
        var thIntv = "Interval"
        var thTrav = "Travel"
        var thDist = "Distance"
        if (iPhoneP) {
            thIntv = "Intvl"
            thTrav = "Travl"
            thDist = "Dist"
        }
        let logTableHeadHTML = ''
        logTableHeadHTML += '<thead id="tblEvlogHdr">'
        logTableHeadHTML += '<tr class="tblEvlogHdr">'
        logTableHeadHTML += '<th id="hTime" class="hTime" style="width: '+cellWidth[1]+';">'+thTime+'</th>'
        logTableHeadHTML += '<th id="hStat" class="hStat" style="width: '+cellWidth[2]+';">'+thStat+'</th>'
        logTableHeadHTML += '<th id="hZone" class="hZone" style="width: '+cellWidth[3]+';">'+thZone+'</th>'
        logTableHeadHTML += '<th id="hIntv" class="hIntv" style="width: '+cellWidth[4]+';">'+thIntv+'</th>'
        logTableHeadHTML += '<th id="hTrav" class="hTrav" style="width: '+cellWidth[5]+';">'+thTrav+'</th>'
        logTableHeadHTML += '<th id="hDist" class="hDist" style="width: '+cellWidth[6]+';">'+thDist+'</th>'

        logTableHeadHTML += '<th id="hdrScroll"> </th>'
        logTableHeadHTML += '</tr>'
        logTableHeadHTML += '</thead>'

        let logTableHTML = ''
        logTableHTML     += '<div class="tblEvlog">'
        logTableHTML     += '<table id ="tblEvlog" >'
        logTableHTML     += logTableHeadHTML
        logTableHTML     += '<tbody id="tblEvlogBody" class="tblEvlogBody">'

        /*
        Example of log file string:
        [['10:54:45', 'home', 'Home', '0 mi', '', '2 hrs', 'Update via iCloud Completed'],
        ['10:54:45', 'home', 'Home', '0 mi', '', '2 hrs', 'Interval basis: 4iz-InZone, Zone=home, Dir=in_zone'],
        ['10:54:45', 'home', 'Home', '0 mi', '', '2 hrs', 'Location Data Prepared (27.72682, -80.390507)'],
        ['10:54:45', 'home', 'Home', '0 mi', '', '2 hrs', 'Preparing Location Data'], ['10:54:45', 'home', 'Home', '0 mi', '', '2 hrs', 'Update via iCloud, nextUpdateTime reached'],
        ['10:54:33', 'home', 'Home', '0 mi', '', '2 hrs', 'Update cancelled, Old location data, Age 18.9 min, Retry #1']]

        Data extraction steps:
        1. Drop '[[' and ']]' at each end.
        2. Split on '], ][' to create a list item for each record.
        3. Cycle through list records. Split on ', ' to create each element.
        */
        if (logAttr.length == 0) {
            return
        }

            var completedItemHighlightNextRowFlag = false
            var classEdgeBar = ''
            var cancelEdgeBarFlag = false
            var initializationRecdFound = false
            var iosappUpdateCompleteFlag = false
            var icloudUpdateCompleteFlag = false
            var alertErrorMsg = ""

            for (var i = 0; i < logEntries.length-1; i++) {
                var thisRecd  = logEntries[i].split("', '",10)

                var tTime = thisRecd[0].slice(1)
                var tStat = thisRecd[1]
                var tZone = thisRecd[2]
                var tIntv = thisRecd[3]
                var tTrav = thisRecd[4]
                var tDist = thisRecd[5]
                var tText = thisRecd[6].slice(0,-1)

                var nextRecd  = logEntries[i+1].split("', '",10)
                var nStat = nextRecd[1]
                var nZone = nextRecd[2]
                var nIntv = nextRecd[3]
                var nTrav = nextRecd[4]
                var nDist = nextRecd[5]
                var nText = nextRecd[6].slice(0,-1)

                var thisRecdTestChg = tStat + tZone + tIntv + tTrav + tDist
                var nextRecdTestChg = nStat + nZone + nIntv + nTrav + nDist

                var maxStatZoneLength = 10
                if (iPhoneP) {
                    tText = tText.replace('/icloud3','... .../icloud3')
                    maxStatZoneLength = 9
                    if (tStat == 'stationary') {tStat = 'stationry'}
                    if (tZone == 'stationary') {tZone = 'stationry'}
                    if (tStat == 'Stationary') {tStat = 'Stationry'}
                    if (tZone == 'Stationary') {tZone = 'Stationry'}
                }
                if (tStat.length > maxStatZoneLength) {
                    tStat = tStat.substr(0, maxStatZoneLength) + "<br>" + tStat.substr(maxStatZoneLength, tStat.length)
                    if (tStat.length > maxStatZoneLength*2) {tStat = tStat.substr(0, maxStatZoneLength*2 + 3) + "..."}
                }
                if (tZone.length > 8) {
                    tZone = tZone.substr(0, maxStatZoneLength) + "<br>" + tZone.substr(maxStatZoneLength, tZone.length)
                    if (tZone.length > maxStatZoneLength*2) {tZone = tZone.substr(0, maxStatZoneLength*2 + 3) + "..."}
                }
                if (tText == nText) {
                    ++sameTextCnt
                    if (sameTextCnt == 1) {var firstTime = tTime}
                    continue
                }
                if (sameTextCnt > 0) {
                    tTime = firstTime
                    tText += ' (+'+ sameTextCnt +' more times)'
                    sameTextCnt = 0
                }

                var classTime = 'colTime'
                var classStat = 'colStat'
                var classZone = 'colZone'
                var classIntv = 'colIntv'
                var classTrav = 'colTrav'
                var classDist = 'colDist'
                var classText = 'colText'

                var highlightResultsFlag = false
                //This is set when the previous item was an update complete item
                if (completedItemHighlightNextRowFlag) {
                    highlightResultsFlag = true
                    completedItemHighlightNextRowFlag = false

                //display the info in var(--label-badge-red) if starting an update
                } else if (tText.indexOf("update started") >= 0) {
                    highlightResultsFlag = true

                //Display info in first row in var(--label-badge-red)
                } else if (row == 0) {
                    highlightResultsFlag = true
                }
                if (highlightResultsFlag ) {
                    classTime += ' highlightResults'
                    classStat += ' highlightResults'
                    classZone += ' highlightResults'
                    classIntv += ' highlightResults'
                    classTrav += ' highlightResults'
                    classDist += ' highlightResults'
                } else {
                    classTime += ' inprocessResults'
                    classStat += ' inprocessResults'
                    classZone += ' inprocessResults'
                    classIntv += ' inprocessResults'
                    classTrav += ' inprocessResults'
                    classDist += ' inprocessResults'
                }

                //Set header recd background bar color and turn edge bar on/off
                //Set Startup start/complete & stage bar colors and edge bars
                var classRecdType  = ' normalText'
                var classHeaderBar = ''
                if (tText.indexOf("update started") >= 0) {
                    classHeaderBar = ' updateRecdHdr'
                    cancelEdgeBarFlag = true
                } else if (tText.indexOf("update complete") >= 0) {
                    if (tText.indexOf("iOS App") >=0) {
                        iosappUpdateCompleteFlag = true
                    } else {
                        icloudUpdateCompleteFlag = true
                    }
                    completedItemHighlightNextRowFlag = true
                    classHeaderBar = ' updateRecdHdr'
                    classEdgeBar   = ' updateEdgeBar'

                } else if (tText.startsWith("^^^")) {
                    cancelEdgeBarFlag = (tText.indexOf("started") >= 0)
                    classHeaderBar = ' dateBarHdr'
                    classEdgeBar   = ' stageEdgeBar'
                    tText = tText.replace("^^^", "")
                    tText = tText.replace("^^^", "")
                } else if (tText.indexOf("Stage") >= 0) {
                    classHeaderBar = ' stageRecdHdr'
                    classEdgeBar   = ' stageEdgeBar'
                }

                if (classHeaderBar != "") {
                    classHeaderBar = " hdrTopBottomShadow" + classHeaderBar
                }

                //Set text color the text starts with a special color character
                var classSpecialTextColor = ''
                var specialColorFlag = true
                if (tText.startsWith("^1^")) {
                    classSpecialTextColor = ' specColor1'
                    tText = tText.slice(3)
                } else if (tText.startsWith("^2^")) {
                    classSpecialTextColor = ' specColor2'
                    tText = tText.slice(3)
                } else if (tText.startsWith("^3^")) {
                    classSpecialTextColor = ' specColor3'
                    tText = tText.slice(3)
                } else if (tText.startsWith("^4^")) {
                    classSpecialTextColor = ' specColor4'
                    tText = tText.slice(3)
                } else if (tText.startsWith("^5^")) {
                    classSpecialTextColor = ' specColor5'
                    tText = tText.slice(3)
                } else if (tText.startsWith("^6^")) {
                    classSpecialTextColor = ' specColor6'
                    tText = tText.slice(3)
                } else if (tText.startsWith("__")) {
                    classSpecialTextColor = ' normalText'
                } else {
                    specialColorFlag = false
                    classSpecialTextColor = ''
                }

                var classErrorMsg = ""
                if (tText.indexOf("Initializing iCloud3") >= 0
                        && tText.indexOf("Complete") == -1)  {
                    initializationRecdFound = true
                }
                if (tText.indexOf(" Error ") >= 0) {
                    classErrorMsg = ' errorMsg'
                    if (initializationRecdFound == false) {
                        alertErrorMsg = "iCloud3 Error Msg at "+tTime
                    }
                } else if (tText.indexOf("iCloud Alert") >= 0) {
                    classErrorMsg = ' errorMsg'
                    if (initializationRecdFound == false
                            && icloudUpdateCompleteFlag == false) {
                        alertErrorMsg = "iCloud Alert Msg at "+tTime
                    }
                } else if (tText.indexOf("iOS App Alert") >= 0) {
                    classErrorMsg = ' errorMsg'
                    if (initializationRecdFound == false
                            && iosappUpdateCompleteFlag == false) {
                        alertErrorMsg = "iOS App Alert Msg at "+tTime
                    }
                } else if (tText.indexOf("Alert") >= 0) {
                    classErrorMsg = ' errorMsg'
                    if (initializationRecdFound == false) {
                        alertErrorMsg = "Alert Msg at "+tTime
                    }
                } else if (tText.startsWith("!")) {
                    classErrorMsg = ' errorMsg'
                    tText = tText.slice(1)
                } else if (tText.indexOf("Warning") >= 0) {
                    classErrorMsg = ' warningMsg'
                }

                //Change CRLF in the text string to HTML >b> for a new line
                while (tText.indexOf("CRLF•") >= 0) {
                    tText = tText.replace("CRLF•","<br>&nbsp;&nbsp;&nbsp;•")
                }
                while (tText.indexOf("CRLF✓") >= 0) {
                    tText = tText.replace("CRLF✓","<br>&nbsp;✓")
                }
                while (tText.indexOf("CRLF") >= 0) {
                    tText = tText.replace("CRLF", "<br>")
                }

                //If displaying a table, the State & Interval can contain column titles
                var classTable = ''
                var txtTblFlag = false
                if (tText.indexOf("¤s") >= 0) {
                    txtTblFlag = true
                    classTable     = ' txtTblStyle'
                }

                //Build the table HTML from the special characters in the recd
                // ¤s=<table><tr>                     Table start, Row start
                // ¤e=</tr></table>                   Row end, Table end
                // §=</tr><tr>                        Row end, next row start
                // «40=<td style='width: 40%'>        Col start, 40% width
                // ¦0=</td><td>                       Col end, next col start
                // ¦10=</td><td style='width: 10%'>   Col end, next col start-width 10%
                // ¦40=</td><td style='width: 40%'>
                tText = tText.replace(/¤s/g, '<table style="width: 100%">')
                tText = tText.replace(/¤e/g, '</table>')

                tText = tText.replace(/«HS/g, '<thead id="txtTblHdr"><tr class="txtTblHdrRow">')
                tText = tText.replace(/¦LH-/g, '<th class="txtTblHdr" colSpan="2">')
                tText = tText.replace(/¦RH-/g, '</th><th class="txtTblHdr" colSpan="2">')
                tText = tText.replace(/»HE/g, '</th></thead>')

                tText = tText.replace(/«LT-/g, '<tr><td class="txtTblEdge" style="width: 28%">&nbsp;')
                tText = tText.replace(/¦LC-/g, '</td><td style="width: 7%">')
                tText = tText.replace(/¦RT-/g, '</td><td class="txtTblEdge" style="width: 28%">&nbsp;')
                tText = tText.replace(/¦RC-/g, '</td><td style="width: 7%">')

                tText = tText.replace(/»/g, '</td></tr>')

                //Abbreviate text if displaying on an iPhone with a smaller display
                if (iPhoneP) {
                    tIntv = tIntv.replace(' sec','s')
                    tIntv = tIntv.replace(' min','m')
                    tIntv = tIntv.replace(' hrs','h')
                    tIntv = tIntv.replace(' hr','h')

                    tTrav = tTrav.replace(' sec','s')
                    tTrav = tTrav.replace(' min','m')
                    tTrav = tTrav.replace(' hrs','h')
                    tTrav = tTrav.replace(' hr','h')

                    tDist  = tDist.replace(' mi','mi')
                    tDist  = tDist.replace(' km','km')

                    if (txtTblFlag) {
                        tText = tText.replace("App Updates", "App Updts")
                        tText = tText.replace("Rqsts", "")
                        tText = tText.replace("Trigger Chgs", "Trig Chg")
                        tText = tText.replace("Locate", "Loc")
                    }
                }

                //Determine if the state/zone/dist/time line should be displayed
                var displayStateZoneLineFlag = false
                if (thisRecdTestChg != nextRecdTestChg)     {displayStateZoneLineFlag = true}
                if (classTime.indexOf("highlightResults") >= 0) {displayStateZoneLineFlag = true}
                if (tStat == '' && tZone == '')             {displayStateZoneLineFlag = false}
                if (tText.startsWith("^^^"))                {displayStateZoneLineFlag = false}

                if (row > 1) {classTime += classEdgeBar}

                //Display Info Row
                if (displayStateZoneLineFlag) {
                    if (tIntv == '') {tIntv = ' '}
                    if (tTrav == '') {tTrav = ' '}
                    if (tDist == '') {tDist = ' '}

                    ++row
                    logTableHTML += '<tr class = "eltRow">'
                    logTableHTML += '<td id="iTime" class="'+classTime +'">'+tTime+'</td>'
                    logTableHTML += '<td id="iStat" class="'+classStat +'">'+tStat+'</td>'
                    logTableHTML += '<td id="iZone" class="'+classZone +'">'+tZone+'</td>'
                    logTableHTML += '<td id="iIntv" class="'+classIntv +'">'+tIntv+'</td>'
                    logTableHTML += '<td id="iTrav" class="'+classTrav +'">'+tTrav+'</td>'
                    logTableHTML += '<td id="iDist" class="'+classDist +'">'+tDist+'</td>'
                    logTableHTML += '</tr>'
                }

                //continue
                //Display Text Row
                //tText = classTime
                classTime = classTime.replace("highlightResults", "")
                classTime = classTime.replace("inprocessResults", "")
                classTime += classRecdType + classHeaderBar
                classTime += ' colTimeTextRow'

                if (classTime.indexOf("Hdr") >= 0) {
                    classText    += ' noLeftEdge'
                    tTime         = ''
                }
                var classTextColor = classHeaderBar + classSpecialTextColor + classTable + classErrorMsg
                if (classTextColor != "") {
                    classText = classText.replace("colText", classTextColor)
                }

                ++row
                logTableHTML += '<tr class = "eltRow">'
                logTableHTML += '<td class="'+classTime+'">'+tTime+'</td>'
                logTableHTML += '</td>'
                logTableHTML += '<td class="'+classText+'"; colspan="5">'+tText+'</td>'
                logTableHTML += '</tr>'

                if (cancelEdgeBarFlag) {
                    classEdgeBar = ''
                    cancelEdgeBarFlag  = false
                }
            }

            logTableHTML += ''
        //}
        logTableHTML += '</tbody></table></div>'
        tblEvlog.innerHTML = logTableHTML

        this._resize_header_width()

        const updateTimeAttr = hass.states['sensor.icloud3_event_log'].attributes['update_time']
        const logLevelDebug  = hass.states['sensor.icloud3_event_log'].attributes['log_level_debug']
        const optEvlog       = root.getElementById("optEvlog")
        const optHalog       = root.getElementById("optHalog")
        const optStartuplog  = root.getElementById("optStartuplog")

        if (logLevelDebug.indexOf("evlog") >= 0) {
            optEvlog.text = "Hide Tracking Monitors"
        } else {
            optEvlog.text = "Show Tracking Monitors"
        }
        if (logLevelDebug.indexOf("halog") >= 0) {
            optHalog.text = "Stop HA Debug Logging"
            infoTimeText = "Debug Log, "+updateTimeAttr
        } else {
            optHalog.text = "Start HA Debug Logging"
        }

        if (alertErrorMsg != "") {
            infoTimeText = "●● " + alertErrorMsg
        }

        this._displayTimeMsgR(infoTimeText)
    }

//---------------------------------------------------------------------------
    _resize_header_width() {
        const root             = this.shadowRoot
        const tblEvlog         = root.getElementById("tblEvlog")
        const devType          = root.getElementById("devType")
        var rowCnt             = tblEvlog.rows.length

        //Get, reset and save header cell widths
        var hdrCellWidthStr = ''
        rowCnt = tblEvlog.rows.length
        for (var row = 1; row < rowCnt-1; row++) {
            var cellCnt   = tblEvlog.rows[row].cells.length
            var cellWidth = tblEvlog.rows[row].cells[1].offsetWidth
            if (cellCnt > 2 && cellWidth != 0) {
                for (var i = 0; i < cellCnt; i++) {
                    var cellBCRObj   = tblEvlog.rows[row].cells[i].getBoundingClientRect()
                    var cellWidthBCR = cellBCRObj.width + 2
                    if (i == 5 && devType.innerText == "") {cellWidthBCR -= 10}
                    hdrCellWidthStr += cellWidthBCR + 'px,'
                    tblEvlog.rows[0].cells[i].style.width = cellWidthBCR+'px'
                }
                //alert(hdrCellWidth.innerText = row + ',' + hdrCellWidthStr)
                return
            }
        }

        return
    }
//---------------------------------------------------------------------------
    _setupDevType() {
        const root           = this.shadowRoot
        const devType        = root.getElementById("devType")

        //iPhone  (portrait)  width=375, ,height=768
        //        (landscape) width=724, ,height=375
        //iPad    (portrait)  width=834, ,height=1092
        //        (landscape) width=1112, height=814
        //Windows (portrait)  width=1424, height=921

        var deviceWidth = window.innerWidth
        var deviceHeight = window.innerHeight

        const userAgentStr = navigator.userAgent
        var userAgentAlamofire = userAgentStr.indexOf("Alamofire")
        var userAgentHA = userAgentStr.indexOf("HomeAssistant")
        var appleDevice = userAgentAlamofire + userAgentHA
        if (appleDevice > 0) {
            if (deviceWidth < 400 && deviceHeight < 800) {
                devType.innerText = "phnP"
            } else if (deviceWidth < 800 && deviceHeight < 400) {
                devType.innerText = "phnL"
            } else if (deviceWidth < 850 && deviceHeight > 800) {
                devType.innerText = "padP"
            } else if (deviceWidth > 800 && deviceHeight < 850) {
                devType.innerText = "padL"
            }
        }
        //alert('/'+devType.innerText+'/')
    }

//---------------------------------------------------------------------------
    _checkNameButtonSelected() {
        /* Simulate name button press using the name returned from HA when  building
        the tblEvlog table. If  the  selected name was changed on one device and
        and then the Event Log was displayed in another, the  Log revs are for the
        selected device but the name highlighter will be for the precious device selected.
        */
        const root              = this.shadowRoot
        const hass              = this._hass
        this.namesAttr          = hass.states['sensor.icloud3_event_log'].attributes['names']
        var filtername        = hass.states['sensor.icloud3_event_log'].attributes['filtername']
        const namesAttr         = this.namesAttr
        const names             = Object.values(namesAttr)
        const btnName0          = root.getElementById("btnName0")
        var lastButtonId        = this._currentButtonId()
        var lastButtonPressed   = root.getElementById(lastButtonId)

        if (filtername == null) {
            lastButtonPressed.classList.add('btnNotSelected')
            lastButtonPressed.classList.remove('btnSelected')

            this._displayNameMsgL("Select Person")
            return

        } else if (filtername == "Initialize") {
            this._setupButtonNames()
            this._nameButtonPress("btnName0")
        }

        for (var i = 0; i < 10; i++) {
            if (names[i] == null) {break}
            if (filtername == names[i]) {
                let buttonId = 'btnName' + i

                if (buttonId != lastButtonId) {
                    this._nameButtonPress(buttonId)
                }
            }
        }
    }
//---------------------------------------------------------------------------
    _nameButtonPress(buttonPressId) {
        /* Handle the button press events. Get the devicename, do an 'icloud3_update'
        event_log devicename' service call to have the event_log attribute populated.
        */
        const root              = this.shadowRoot
        const hass              = this._hass
        this.namesAttr          = hass.states['sensor.icloud3_event_log'].attributes['names']
        const namesAttr         = this.namesAttr
        const names             = Object.values(namesAttr)
        const devicenames       = Object.keys(namesAttr)
        const logRecdCnt        = root.getElementById("logRecdCnt")
        const thisButtonId      = root.getElementById("thisButtonId")
        const thisButtonPressed = root.getElementById(buttonPressId)

        var lastButtonId        = this._currentButtonId()
        var lastButtonPressed   = root.getElementById(lastButtonId)
        var buttonPressX        = buttonPressId.substr(-1)
        var statusName         = names[buttonPressX]+"  ("+devicenames[buttonPressX]+")"

        this._displayNameMsgL(statusName)
        thisButtonId.innerText = buttonPressId

        lastButtonPressed.classList.remove('btnSelected')
        lastButtonPressed.classList.add('btnNotSelected')
        thisButtonPressed.classList.remove('btnNotSelected')
        thisButtonPressed.classList.add('btnSelected')
        thisButtonPressed.classList.remove("btnHover")

        this._hass.callService("device_tracker", "icloud3_update", {
            device_name: devicenames[buttonPressX],
            command: 'refresh_event_log'})
    }

//---------------------------------------------------------------------------
    _commandButtonPress(actionButton) {
        /* Handle the button press events. Get the devicename, do an 'icloud3_update'
        event_log devicename' service call to have the event_log attribute populated.
        */
        const root          = this.shadowRoot
        const hass          = this._hass
        this.namesAttr      = hass.states['sensor.icloud3_event_log'].attributes['names']
        const namesAttr     = this.namesAttr
        const devicenames   = Object.keys(namesAttr)
        const btnAction     = root.getElementById('btnAction')
        const logRecdCnt    = root.getElementById("logRecdCnt")
        const thisButtonId  = root.getElementById("thisButtonId")

        var lastButtonId     = this._currentButtonId()
        var buttonPressX     = lastButtonId.substr(-1)
        var actionDevicename = devicenames[buttonPressX]

        if (actionButton == "btnRefresh") {
            this._hass.callService("device_tracker", "icloud3_update", {
                device_name: actionDevicename,
                command: "refresh_event_log"})

        } else if (actionButton == "btnAction") {
            var actionValue = btnAction.value
            var actionIndex = btnAction.selectedIndex
            btnAction.options[actionIndex].selected = false

            if (actionValue == "dev-refresh_event_log") {
                actionDevicename = "startup_log"
            }

            //Device Actions
            if (actionValue.startsWith("dev-")) {
                actionValue = actionValue.slice(4)

                if (actionValue == "find-iphone-alert") {
                    this._hass.callService("device_tracker", "icloud3_find_iphone_alert",
                        {device_name: actionDevicename})
                } else {
                    this._hass.callService("device_tracker", "icloud3_update",
                        {device_name: actionDevicename,
                         command: actionValue})
                }

            //Global Actions
            } else {
                this._hass.callService("device_tracker", "icloud3_update",
                    {command: actionValue})

                if (actionValue == "restart") {
                    thisButtonId.innerText = "setup"
                    logRecdCnt.innerText = "-1"
                }
            }

            //Lose btnAction focus to reset selected option
            btnAction.blur()
        }
    }

//---------------------------------------------------------------------------
    _btnClassMouseOver(buttonId) {

        const root          = this.shadowRoot
        const button        = root.getElementById(buttonId)
        const devType       = root.getElementById("devType")

        if (buttonId == "btnHelp") {
            this._displayInfoText("iCloud3 User Manual")

        } else if (buttonId == "btnRefresh") {
            this._displayInfoText("Refresh Event Log")

        } else if (buttonId == "btnAction") {
            this._displayTimeMsgR("Show Action Command List")
        }

        if (devType.innerText == "") {button.classList.add("btnHover")}
    }
    //---------------------------------------------------------------------------
    _btnClassMouseOut(buttonId) {

        const root = this.shadowRoot
        const hass          = this._hass
        this.logLevelDebug  = hass.states['sensor.icloud3_event_log'].attributes['log_level_debug']
        const button        = root.getElementById(buttonId)
        const devType       = root.getElementById("devType")

        if (buttonId == 'btnHelp') {
            this._displayInfoText('')

        } else if (buttonId == 'btnRefresh') {
            this._displayInfoText('')
        }

        if (devType.innerText == "") {button.classList.remove("btnHover")}
        this._displayTimeMsgR("")
    }
//---------------------------------------------------------------------------
    _currentButtonId() {
        const root = this.shadowRoot
        const thisButtonId = root.getElementById("thisButtonId")

        return thisButtonId.innerText
    }
//---------------------------------------------------------------------------
    _displayTimeMsgR(msg) {
        // Display text below action button
        const root = this.shadowRoot
        const hass = this._hass
        const statusTime = root.getElementById("statusTime")
        const updateTimeAttr    = hass.states['sensor.icloud3_event_log'].attributes['update_time']

        //if (statusTime.innerText.startsWith("●●")) {
            //pass
        if (msg == "") {
            statusTime.innerText = "Refreshed: " + updateTimeAttr
        } else {
            statusTime.innerText = msg
        }
    }

    //---------------------------------------------------------------------------
    _displayNameMsgL(msg) {
        /* Display text  below name button */
        const root = this.shadowRoot
        const statusName  = root.getElementById("statusName")
        statusName.innerText = msg
    }

    //---------------------------------------------------------------------------
    _displayInfoText(msg) {
        /* Display text  in area below refresh & help buttons */
        const root = this.shadowRoot
        const infoText  = root.getElementById("infoText")
        infoText.innerText = msg
    }

    //---------------------------------------------------------------------------
    getCardSize() {
        return 1
    }

}


customElements.define('icloud3-event-log-card', iCloud3EventLogCard)
